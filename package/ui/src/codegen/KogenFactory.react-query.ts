/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  UseQueryOptions,
  useQuery,
  useMutation,
  UseMutationOptions,
} from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import {
  OptionType,
  FactoryConfig,
  Config,
  ArrayOfDeployedOption,
} from "./KogenFactory.types";
import {
  KogenFactoryQueryClient,
  KogenFactoryClient,
} from "./KogenFactory.client";
export const kogenFactoryQueryKeys = {
  contract: [
    {
      contract: "kogenFactory",
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [
      { ...kogenFactoryQueryKeys.contract[0], address: contractAddress },
    ] as const,
  config: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...kogenFactoryQueryKeys.address(contractAddress)[0],
        method: "config",
        args,
      },
    ] as const,
  deployedOptions: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...kogenFactoryQueryKeys.address(contractAddress)[0],
        method: "deployed_options",
        args,
      },
    ] as const,
};
export const kogenFactoryQueries = {
  config: <TData = FactoryConfig>({
    client,
    options,
  }: KogenFactoryConfigQuery<TData>): UseQueryOptions<
    FactoryConfig,
    Error,
    TData
  > => ({
    queryKey: kogenFactoryQueryKeys.config(client?.contractAddress),
    queryFn: () =>
      client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled:
      !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  deployedOptions: <TData = ArrayOfDeployedOption>({
    client,
    args,
    options,
  }: KogenFactoryDeployedOptionsQuery<TData>): UseQueryOptions<
    ArrayOfDeployedOption,
    Error,
    TData
  > => ({
    queryKey: kogenFactoryQueryKeys.deployedOptions(
      client?.contractAddress,
      args,
    ),
    queryFn: () =>
      client
        ? client.deployedOptions({
            afterDateInSeconds: args.afterDateInSeconds,
          })
        : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled:
      !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
};
export interface KogenFactoryReactQuery<TResponse, TData = TResponse> {
  client: KogenFactoryQueryClient | undefined;
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined;
  };
}
export interface KogenFactoryDeployedOptionsQuery<TData>
  extends KogenFactoryReactQuery<ArrayOfDeployedOption, TData> {
  args: {
    afterDateInSeconds?: number;
  };
}
export function useKogenFactoryDeployedOptionsQuery<
  TData = ArrayOfDeployedOption,
>({ client, args, options }: KogenFactoryDeployedOptionsQuery<TData>) {
  return useQuery<ArrayOfDeployedOption, Error, TData>(
    kogenFactoryQueryKeys.deployedOptions(client?.contractAddress, args),
    () =>
      client
        ? client.deployedOptions({
            afterDateInSeconds: args.afterDateInSeconds,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  );
}
export interface KogenFactoryConfigQuery<TData>
  extends KogenFactoryReactQuery<FactoryConfig, TData> {}
export function useKogenFactoryConfigQuery<TData = FactoryConfig>({
  client,
  options,
}: KogenFactoryConfigQuery<TData>) {
  return useQuery<FactoryConfig, Error, TData>(
    kogenFactoryQueryKeys.config(client?.contractAddress),
    () =>
      client ? client.config() : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  );
}
export interface KogenFactoryDeployMutation {
  client: KogenFactoryClient;
  msg: {
    codeId: number;
    optionConfig: Config;
    optionType: OptionType;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useKogenFactoryDeployMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, KogenFactoryDeployMutation>,
    "mutationFn"
  >,
) {
  return useMutation<ExecuteResult, Error, KogenFactoryDeployMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.deploy(msg, fee, memo, funds),
    options,
  );
}
export interface KogenFactoryUpdateConfigMutation {
  client: KogenFactoryClient;
  msg: {
    newConfig: FactoryConfig;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useKogenFactoryUpdateConfigMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, KogenFactoryUpdateConfigMutation>,
    "mutationFn"
  >,
) {
  return useMutation<ExecuteResult, Error, KogenFactoryUpdateConfigMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateConfig(msg, fee, memo, funds),
    options,
  );
}
