/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  CosmWasmClient,
  SigningCosmWasmClient,
  ExecuteResult,
} from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {
  OptionType,
  FactoryConfig,
  Config,
  ArrayOfDeployedOption,
} from "./KogenFactory.types";
export interface KogenFactoryReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<FactoryConfig>;
  deployedOptions: ({
    afterDateInSeconds,
  }: {
    afterDateInSeconds?: number;
  }) => Promise<ArrayOfDeployedOption>;
}
export class KogenFactoryQueryClient implements KogenFactoryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.deployedOptions = this.deployedOptions.bind(this);
  }

  config = async (): Promise<FactoryConfig> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {},
    });
  };
  deployedOptions = async ({
    afterDateInSeconds,
  }: {
    afterDateInSeconds?: number;
  }): Promise<ArrayOfDeployedOption> => {
    return this.client.queryContractSmart(this.contractAddress, {
      deployed_options: {
        after_date_in_seconds: afterDateInSeconds,
      },
    });
  };
}
export interface KogenFactoryInterface extends KogenFactoryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: (
    {
      newConfig,
    }: {
      newConfig: FactoryConfig;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>;
  deploy: (
    {
      codeId,
      optionConfig,
      optionType,
    }: {
      codeId: number;
      optionConfig: Config;
      optionType: OptionType;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>;
}
export class KogenFactoryClient
  extends KogenFactoryQueryClient
  implements KogenFactoryInterface
{
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(
    client: SigningCosmWasmClient,
    sender: string,
    contractAddress: string,
  ) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.deploy = this.deploy.bind(this);
  }

  updateConfig = async (
    {
      newConfig,
    }: {
      newConfig: FactoryConfig;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_config: {
          new_config: newConfig,
        },
      },
      fee,
      memo,
      _funds,
    );
  };
  deploy = async (
    {
      codeId,
      optionConfig,
      optionType,
    }: {
      codeId: number;
      optionConfig: Config;
      optionType: OptionType;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        deploy: {
          code_id: codeId,
          option_config: optionConfig,
          option_type: optionType,
        },
      },
      fee,
      memo,
      _funds,
    );
  };
}
